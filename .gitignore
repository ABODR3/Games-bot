const Discord = require('discord.js')
const client = new Discord.Client()

const prefix = "!";
client.on("ready", () => {
  console.log(`${client.user.username} READY BOT FOR GAMES :) `)
})

client.on("message", async message => {
  if (message.content === prefix + "help") {
    const embed = new Discord.MessageEmbed()
      .setAuthor("Commands:", client.user.avatarURL())
      .setThumbnail(message.author.avatarURL())
      .setColor("BLUE")
         .addField(`${prefix}ุงุณุฑุน`,`ูุนุจุฉ ุณุฑุนุฉ ูุชุงุจุฉ ุงููููุงุช`,true)
      .addField(`${prefix}ููู`,`ูุนุจุฉ ุชูููู ุงููููุงุช`,true)
      .addField(`${prefix}ูุบุฒ`,`ูุนุจุฉ ุงูุฃูุบุงุฒ`,true)
      .addField(`${prefix}ุฑูุจ`,"ูุนุจุฉ ุชุฑููุจ ุงููููุงุช",true)
      .addField(`${prefix}ุงุนูุงู`,"ูุนุจุฉ ุงุนูุงู ุงูุฏูู ",true)
    message.channel.send(embed)
  }


  if (message.content === prefix + "ุงุณุฑุน") {
   const f=["ุฒููุจู","ูุณุทูุทููุฉ","ุญุจูุจู ูุงููู","ุตุฑุงุน","ูุดุฑูุน","ูุซูุซ","ุฑูุฑู","ุงูุดุนุฑ","ุฎูู","ููุจ","ุฅุฎูุงุก","ุจุงุฆุน","ุซุคููู","ููููุณ","ุณูุงูุฉ","ุจุฑููู","ุญุจ","ูุนุฏู","ุชูุงู","ูุจุณููุฉ","ุงูุฎูู"]
    let fast = Math.floor(Math.random() * f.length)
    const embed = new Discord.MessageEmbed()
      .setAuthor(client.user.username, client.user.avatarURL())
      .setColor("BLUE")
      .setDescription(`\`\`\`${f[fast]}\`\`\``)
      .setFooter("ูุฏูู 15 ุซุงููุฉ ููุงุฌุงุจุฉ")
      .setTimestamp()
    message.channel.send(embed)
    const filter = m => m.content.includes(f[fast]);
    message.channel.awaitMessages(filter, {
      max: 1,
      time: 15000,
      errors: ['time'],
    })

      .then((collected) => {
        const embed = new Discord.MessageEmbed()
          .setColor("GREEN")
          .setDescription(`โ | <@${collected.first().author.id}> ุงูุฃุฌุงุจุฉ ุตุญูุญุฉ!`)
        message.channel.send(embed)
      })
      .catch(() => {
        const embed = new Discord.MessageEmbed()
          .setColor("RED")
          .setDescription(`๐ | ุฃูุชูู ุงูููุช ูู ุชููู ุจุงูุงุฌุงุจุฉ ุงูุตุญูุญุฉ`)
        message.channel.send(embed)
      });
  }

  if (message.content === prefix + "ููู") {
   const f=["ุฒููุจู","ูุณุทูุทููุฉ","ุญุจูุจู ูุงููู","ุตุฑุงุน","ูุดุฑูุน","ูุซูุซ","ุฑูุฑู","ุงูุดุนุฑ","ุฎูู","ููุจ","ุฅุฎูุงุก","ุจุงุฆุน","ุซุคููู","ููููุณ","ุณูุงูุฉ","ุจุฑููู","ุญุจ","ูุนุฏู","ุชูุงู","ูุจุณููุฉ","ุงูุฎูู"]
    const fk=["ุฒ ู ู ุจ ู","ู ุณ ุท ู ุท ู ู ุฉ","ุญ ุจ ู ุจ ู ู ุง ู ู ู","ุต ุฑ ุง ุน","ู ุด ุฑ ู ุน","ู ุซ ู ุซ","ุฑ ู ุฑ ู","ุง ู ุด ุน ุฑ","ุฎ ู ู","ู ู ุจ","ุฅ ุฎ ู ุง ุก","ุจ ุง ุฆ ุน","ุซ ุค ู ู ู","ู ู ู ู ุณ","ุณ ู ุง ู ุฉ","ุจ ุฑ ู ู ู","ุญ ุจ","ู ุน ุฏ ู","ุช ู ุง ู","ู ุจ ุณ ู ู ุฉ","ุง ู ุฎ ู ู"]

    let fkk = Math.floor(Math.random() * f.length)
    const embed = new Discord.MessageEmbed()
      .setAuthor(client.user.username, client.user.avatarURL())
      .setColor("BLUE")
      .setDescription(`\`\`\`${f[fkk]}\`\`\``)
      .setFooter("ูุฏูู 15 ุซุงููุฉ ููุงุฌุงุจุฉ")
      .setTimestamp()
    message.channel.send(embed)
    const filter = m => m.content.includes(fk[fkk]);
    message.channel.awaitMessages(filter, {
      max: 1,
      time: 15000,
      errors: ['time'],
    })

      .then((collected) => {
        const embed = new Discord.MessageEmbed()
          .setColor("GREEN")
          .setDescription(`โ | <@${collected.first().author.id}> ุงูุฃุฌุงุจุฉ ุตุญูุญุฉ!`)
        message.channel.send(embed)
      })
      .catch(() => {
        const embed = new Discord.MessageEmbed()
          .setColor("RED")
          .setDescription(`๐ | ุฃูุชูู ุงูููุช ูู ุชููู ุจุงูุงุฌุงุจุฉ ุงูุตุญูุญุฉ`)
        message.channel.send(embed)
      });
  }

  if (message.content === prefix + "ุฑูุจ") {
const g=["ุฒ ู ู ุจ ู","ู ุณ ุท ู ุท ู ู ุฉ","ุญ ุจ ู ุจ ู ู ุง ู ู ู","ุต ุฑ ุง ุน","ู ุด ุฑ ู ุน","ู ุซ ู ุซ","ุฑ ู ุฑ ู","ุง ู ุด ุน ุฑ","ุฎ ู ู","ู ู ุจ","ุฅ ุฎ ู ุง ุก","ุจ ุง ุฆ ุน","ุซ ุค ู ู ู","ู ู ู ู ุณ","ุณ ู ุง ู ุฉ","ุจ ุฑ ู ู ู","ุญ ุจ","ู ุน ุฏ ู","ุช ู ุง ู","ู ุจ ุณ ู ู ุฉ","ุง ู ุฎ ู ู"]
   const gm=["ุฒููุจู","ูุณุทูุทููุฉ","ุญุจูุจู ูุงููู","ุตุฑุงุน","ูุดุฑูุน","ูุซูุซ","ุฑูุฑู","ุงูุดุนุฑ","ุฎูู","ููุจ","ุฅุฎูุงุก","ุจุงุฆุน","ุซุคููู","ููููุณ","ุณูุงูุฉ","ุจุฑููู","ุญุจ","ูุนุฏู","ุชูุงู","ูุจุณููุฉ","ุงูุฎูู"]

    let gm3 = Math.floor(Math.random() * g.length)
    const embed = new Discord.MessageEmbed()
      .setAuthor(client.user.username, client.user.avatarURL())
      .setColor("BLUE")
      .setDescription(`\`\`\`${g[gm3]}\`\`\``)
      .setFooter("ูุฏูู 15 ุซุงููุฉ ููุงุฌุงุจุฉ")
      .setTimestamp()
    message.channel.send(embed)
    const filter = m => m.content.includes(gm[gm3]);
    message.channel.awaitMessages(filter, {
      max: 1,
      time: 15000,
      errors: ['time'],
    })

      .then((collected) => {
        const embed = new Discord.MessageEmbed()
          .setColor("GREEN")
          .setDescription(`โ | <@${collected.first().author.id}> ุงูุฃุฌุงุจุฉ ุตุญูุญุฉ!`)
        message.channel.send(embed)
      })
      .catch(() => {
        const embed = new Discord.MessageEmbed()
          .setColor("RED")
          .setDescription(`๐ | ุฃูุชูู ุงูููุช ูู ุชููู ุจุงูุงุฌุงุจุฉ ุงูุตุญูุญุฉ`)
        message.channel.send(embed)
      });

  }

  if (message.content === prefix + "ุงุนูุงู") {
    const a=["https://upload.wikimedia.org/wikipedia/commons/thumb/f/f6/Flag_of_Iraq.svg/560px-Flag_of_Iraq.svg.png","https://upload.wikimedia.org/wikipedia/commons/thumb/7/77/Flag_of_Algeria.svg/560px-Flag_of_Algeria.svg.png","https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Flag_of_Syria.svg/560px-Flag_of_Syria.svg.png","https://upload.wikimedia.org/wikipedia/commons/thumb/8/89/Flag_of_Yemen.svg/560px-Flag_of_Yemen.svg.png","https://upload.wikimedia.org/wikipedia/commons/thumb/8/89/Flag_of_Yemen.svg/560px-Flag_of_Yemen.svg.png","https://upload.wikimedia.org/wikipedia/commons/thumb/5/59/Flag_of_Lebanon.svg/560px-Flag_of_Lebanon.svg.png","https://upload.wikimedia.org/wikipedia/commons/thumb/f/fe/Flag_of_Egypt.svg/560px-Flag_of_Egypt.svg.png","https://upload.wikimedia.org/wikipedia/commons/thumb/c/cb/Flag_of_the_United_Arab_Emirates.svg/560px-Flag_of_the_United_Arab_Emirates.svg.png","https://upload.wikimedia.org/wikipedia/commons/thumb/f/fa/Flag_of_the_People%27s_Republic_of_China.svg/560px-Flag_of_the_People%27s_Republic_of_China.svg.png","https://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Flag_of_France.svg/560px-Flag_of_France.svg.png","https://upload.wikimedia.org/wikipedia/commons/thumb/b/ba/Flag_of_Germany.svg/560px-Flag_of_Germany.svg.png","https://upload.wikimedia.org/wikipedia/commons/thumb/f/f3/Flag_of_Russia.svg/560px-Flag_of_Russia.svg.png","https://media.discordapp.net/attachments/1011820688987914242/1057873633294422156/jp.png","https://media.discordapp.net/attachments/1011820688987914242/1057873632921124955/pt.png","https://media.discordapp.net/attachments/1011820688987914242/1057873631390208020/hr.png","https://media.discordapp.net/attachments/1011820688987914242/1057873632040333352/vn.png","https://media.discordapp.net/attachments/1011820688987914242/1057873632526864464/tw.png"]
   const a3=["ุงูุนุฑุงู","ุงูุฌุฒุงุฆุฑ","ุณูุฑูุง","ุงูููู","ูุจูุงู","ุชุฑููุง","ูุตุฑ","ุงูุฅูุงุฑุงุช","ุงูุตูู","ูุฑูุณุง","ุงููุงููุง","ุฑูุณูุง","ุงููุงุจุงู","ุงูุจุฑุชุบุงู","ูุฑูุงุชูุง","ููุชูุงู","ุชุงููุงู"]

    let a3l = Math.floor(Math.random() * a.length)
    const embed = new Discord.MessageEmbed()
      .setAuthor(client.user.username, client.user.avatarURL())
      .setColor("BLUE")
      .setImage(a[a3l])
      .setFooter("ูุฏูู 15 ุซุงููุฉ ููุงุฌุงุจุฉ")
      .setTimestamp()
    message.channel.send(embed)
    const filter = m => m.content.includes(a3[a3l]);
    message.channel.awaitMessages(filter, {
      max: 1,
      time: 15000,
      errors: ['time'],
    })

      .then((collected) => {
        const embed = new Discord.MessageEmbed()
          .setColor("GREEN")
          .setDescription(`โ | <@${collected.first().author.id}> ุงูุฃุฌุงุจุฉ ุตุญูุญุฉ!`)
        message.channel.send(embed)
      })
      .catch(() => {
        const embed = new Discord.MessageEmbed()
          .setColor("RED")
          .setDescription(`๐ | ุฃูุชูู ุงูููุช ูู ุชููู ุจุงูุงุฌุงุจุฉ ุงูุตุญูุญุฉ`)
        message.channel.send(embed)
      });
  }

  if (message.content === prefix + "ูุบุฒ") {
   const p=["ุดูุก ููุฌูุฏ ูู ุงูุณูุงุก ุฅุฐุง ุฃุถูุช ุฅููู ุญุฑูุง ุฃุตุจุญ ูู ุงูุฃุฑุถุ","ูุง ูู ุงูุดูุก ุงูุฐู ููุตูู ูู ุจูุชู ุฅูู ุนููู ุฏูู ุฃู ูุชุญุฑูุ","ุชุงุฌุฑ ูู ุงูุชุฌุงุฑ ุฅุฐุง ุงูุชูุนูุง ุนููู ุทุงุฑ. ููู ููุ","ูุง ูู ุงูุดูุก ุงูุฐู ุชุฑููู ูููุง ุงุญุชุฌุช ุฅูููุ","ูุณูุฑ ุจูุง ุฑุฌููู ู ูุง ูุฏุฎู ุฅูุง ุจุงูุฃุฐููู ูุง ููุ","ูุง ูู ุงูุดู ุงูุฐู ููุชุจ ู ูุง ููุฑุ","ูู ูู ุงูุญููุงู ุงูุฐู ูุญู ุฅุฐูู ุจุฃูููุ","ูุง ูู ุงูุดู ุงูุฐู ูููุง ูุซุฑ ูุฏููุง ุบูุง ู ูููุง ูู ุฑุฎุตุ","ูุง ูู ุงูุชู ุชุฃูู ู ูุง ุชุดุจุนุ","ูุง ูู ุงูุดู ุงูุฐู ูููุง ุฃุฎุฐุช ููู ููุจุฑ ุ","ูุง ูู ุงูุดู ุงูุฐู ููุฌุฏ ูู ูุณุท ุจุงุฑูุณุ","ูุง ูู ุงูุจูุช ุงูุฐู ููุณ ููู ุฃุจูุงุจ ู ูุง ููุงูุฐุ","ุฃูู ููุน ุงูุจุญุฑ ุงูุฐู ูุง ููุฌุฏ ุจู ูุงุกุ","ูุงูู ุงูุดู ุงูุฐู ููุจุถ ุจูุง ููุจุ","ุฃุฎุช ุฎุงูู ู ููุณุช ุฎุงูุชู ูู ุชููู ุ","ุดูุก ูุญุชูู ุนูู ูููุงุชุ ุฅูุง ุฃูู ูุง ูุชููู ุฃุจุฏูุงุ","ูุง ูู ุฃูุงูู ุฏุงุฆููุง ููููู ูุง ุชุณุชุทูุน ุฑุคูุชูุ","ูุง ุงูุฐู ูุฑุชูุน ููููู ูุง ููุฒูุ"]
  const pu=["ูุฌู","ุงูุทุฑูู","ุนุทุงุฑ","ุดุจูุฉ ุงูุตูุฏ","ุงูุตูุช","ุงูููู","ุงูููู","ุงูุนูู","ุงููุงุฑ","ุงูุญูุฑุฉ","ุฑุงุก","ุจูุช ุงูุดุนุฑ","ูู ุงูุฎุฑูุทุฉ","ุงูุณุงุนู","ุฃูู","ูุชุงุจ","ุงููุณุชูุจู","ุงูุนูุฑ"]

    let puz = Math.floor(Math.random() * p.length)
    const embed = new Discord.MessageEmbed()
      .setAuthor(client.user.username, client.user.avatarURL())
      .setColor("BLUE")
      .setDescription(`\`\`\`${p[puz]}\`\`\``)
      .setFooter("ูุฏูู 15 ุซุงููุฉ ููุงุฌุงุจุฉ")
      .setTimestamp()
    message.channel.send(embed)
    const filter = m => m.content.includes(pu[puz]);
    message.channel.awaitMessages(filter, {
      max: 1,
      time: 15000,
      errors: ['time'],
    })

      .then((collected) => {
        const embed = new Discord.MessageEmbed()
          .setColor("GREEN")
          .setDescription(`โ | <@${collected.first().author.id}> ุงูุฃุฌุงุจุฉ ุตุญูุญุฉ!`)
        message.channel.send(embed)
      })
      .catch(() => {
        const embed = new Discord.MessageEmbed()
          .setColor("RED")
          .setDescription(`๐ | ุฃูุชูู ุงูููุช ูู ุชููู ุจุงูุงุฌุงุจุฉ ุงูุตุญูุญุฉ`)
        message.channel.send(embed)
      });
  }
})
client.login(process.env.token)
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.*
!.env.example

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Sveltekit cache directory
.svelte-kit/

# vitepress build output
**/.vitepress/dist

# vitepress cache directory
**/.vitepress/cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# Firebase cache directory
.firebase/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v3
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/sdks
!.yarn/versions

# Vite logs files
vite.config.js.timestamp-*
vite.config.ts.timestamp-*
